{"version":3,"sources":["service/questionsManger.js","model/addQuestions/index.js"],"names":["__webpack_require__","d","__webpack_exports__","getAllExamType","getAllQuestionsType","getAllSubject","addQuestions","getQusetions","updateQUestions","_utils_request__WEBPACK_IMPORTED_MODULE_0__","request","questionsInfo","method","body","payload","arr","i","push","concat","str","join","console","log","updated","requestData","Promise","all","namespace","state","examType","exam_id","questionsType","questions_type_id","subject","subject_id","title","questions_stem","questions_answer","addStatus","updatedStatus","reducers","initData","Object","D_software_phpStudy_WWW_react_exam_node_modules_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_1__","effects","getQuestions","D_software_phpStudy_WWW_react_exam_node_modules_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default","a","mark","_ref","call","put","result","wrap","_context","prev","next","questions_id","id","sent","code","type","data","stop","this","action","_ref2","select","keys","ids","localData","_context2","store","forEach","item","key","JSON","parse","localStorage","getItem","_ref3","timer","_context3","setTimeout","UtilGlobal","changeState","isOpen","clearTimeout","_ref4","_context4"],"mappings":"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","file":"static/js/4.fdd53e3f.chunk.js","sourcesContent":["import request from '../utils/request'\r\n// 获取所有的考试类型\r\nexport function getAllExamType(){\r\n    return request('/exam/examType');\r\n}\r\n// 获取所有的试题类型\r\nexport function getAllQuestionsType(){\r\n    return request('/exam/getQuestionsType');\r\n}\r\n// 获取所有的课程\r\nexport function getAllSubject(){\r\n    return request('/exam/subject');\r\n}\r\n// 添加试题\r\nexport function addQuestions(questionsInfo){\r\n    return request('/exam/questions',{\r\n        method:'POST',\r\n        body:questionsInfo,\r\n    });\r\n}\r\n// 获取试题\r\nexport function getQusetions(payload){\r\n    let arr = [];\r\n    for(let i in payload){\r\n        if (payload[i]) {\r\n            arr.push(`${i}=${payload[i]}`);\r\n        }\r\n    }\r\n    let str = '?'+arr.join('&');\r\n    console.log(str)\r\n    return request(`/exam/questions/condition${str}`);\r\n}\r\n\r\n// 更新试题\r\n\r\nexport function updateQUestions(updated){\r\n    return request('/exam/questions/update',{\r\n        method:'PUT',\r\n        body:updated\r\n    });\r\n}","import {\r\n    getAllExamType,\r\n    getAllQuestionsType,\r\n    getAllSubject,\r\n    addQuestions,\r\n    updateQUestions,\r\n    getQusetions\r\n} from '@/service/questionsManger'\r\nimport UtilGlobal from '../../utils/global'\r\nfunction requestData(){\r\n    return Promise.all([getAllExamType(),getAllQuestionsType(),getAllSubject()]);\r\n}\r\nexport default {\r\n    namespace:'addQuestions',\r\n    state:{\r\n        examType:[],\r\n        exam_id:'',\r\n        questionsType:[],\r\n        questions_type_id:'',\r\n        subject:[],\r\n        subject_id:'',\r\n        title:'', //题目标题\r\n        questions_stem:'', // 题干\r\n        questions_answer:'',// 答案\r\n        addStatus:0, // 0 未提交 1提交成功 2 提交中 3 提交失败\r\n        updatedStatus:0\r\n    },\r\n    reducers:{\r\n        initData(state,payload){ // 初始化数据\r\n            return {...state,...payload}\r\n        }\r\n    },\r\n    effects:{\r\n        *getQuestions(payload, {call,put}){\r\n            console.log(payload)\r\n            let result = yield call(getQusetions, {\r\n                questions_id: payload.id\r\n            });\r\n            console.log(result)\r\n            if(result.code === 1){\r\n                yield put({type:'initData',...result.data[0]});\r\n            }\r\n        },\r\n        *requestData(action,{call,put,select}){\r\n            let state = yield select(store=>store.addQuestions);\r\n            let result = yield call(requestData);\r\n            let keys = ['examType','questionsType','subject'];\r\n            let ids = ['exam_id','questions_type_id','subject_id']\r\n            let payload = {};\r\n            result.forEach((item,key)=>{\r\n                if(item){\r\n                    payload[keys[key]] = item.data;\r\n                    if(!state[ids[key]]){\r\n                        payload[ids[key]] = item.data[0][ids[key]];\r\n                    }\r\n                }\r\n            });\r\n            let localData = JSON.parse(localStorage.getItem('editQuestionsInfo'));\r\n            if(localData){\r\n                payload = {...payload,...localData}\r\n            }\r\n            yield put({type:'initData',...payload});\r\n        },\r\n        *addQuestions(payload,{call,put}){\r\n            let timer = setTimeout(()=>{\r\n                UtilGlobal.changeState({isOpen:true});\r\n            },500);\r\n            yield put({type:'initData',addStatus:2});\r\n            let result = yield call(addQuestions,payload);\r\n            clearTimeout(timer);\r\n            UtilGlobal.changeState({isOpen:false});\r\n            if(result.code === 1){\r\n                yield put({type:'initData',addStatus:1});\r\n            }else{\r\n                yield put({type:'initData',addStatus:3});\r\n            }\r\n        },\r\n        *updateQUestions(payload,{call,put}){\r\n            let timer = setTimeout(()=>{\r\n                UtilGlobal.changeState({isOpen:true});\r\n            },500);\r\n            yield put({type:'initData',updatedStatus:2});\r\n            let {\r\n                title,\r\n                questions_stem,\r\n                questions_answer,\r\n                subject_id,\r\n                questions_type_id,\r\n                exam_id,\r\n                questions_id\r\n            } = payload;\r\n            let result = yield call(updateQUestions,{\r\n                title,\r\n                questions_stem,\r\n                questions_answer,\r\n                subject_id,\r\n                questions_type_id,\r\n                exam_id,\r\n                questions_id\r\n            });\r\n            clearTimeout(timer);\r\n            UtilGlobal.changeState({isOpen:false});\r\n            if(result.code === 1){\r\n                yield put({type:'initData',updatedStatus:1});\r\n            }else{\r\n                yield put({type:'initData',updatedStatus:3});\r\n            }\r\n        }\r\n    }\r\n\r\n}"],"sourceRoot":""}